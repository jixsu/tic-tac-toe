{"version":3,"sources":["Components/node.tsx","utils/determineWinner.ts","Components/ticTacToe.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Node","props","className","onClick","_id","selected","determineWinner","arrayOfSelected","player","mappedArray","map","node","split","parseInt","console","log","counter","nonDiagonalWin","x","rowWin","columnWin","y","checkNonDiagonalWin","diagonalWin","checkDiagonalWin","TicTacToe","state","turn","o","score","winner","gridArray","handleNodeClick","id","isSelected","newArray","push","setState","newScore","handleRestartGame","renderNodes","row","key","this","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b11e79c.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"../css/node.css\";\r\n\r\nexport interface NodeProps {\r\n  _id: string;\r\n  selected: string;\r\n  onClick: (_id: string) => boolean;\r\n}\r\n\r\nconst Node: React.SFC<NodeProps> = (props) => {\r\n  return (\r\n    <td className=\"grid-node\" onClick={() => props.onClick(props._id)}>\r\n      {props.selected === \"x\" && <div>x</div>}\r\n      {props.selected === \"o\" && <div>o</div>}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","export function determineWinner(\r\n  arrayOfSelected: Array<string>,\r\n  player: string\r\n) {\r\n  const mappedArray: Array<Array<number>> = arrayOfSelected.map((node) => {\r\n    const stringArray = node.split(\"-\");\r\n    return stringArray.map((node) => parseInt(node));\r\n  });\r\n  console.log(mappedArray);\r\n  let counter = [\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n  ];\r\n  for (const node of mappedArray) {\r\n    counter[node[0]][node[1]] = 1;\r\n  }\r\n  const nonDiagonalWin = checkNonDiagonalWin(counter);\r\n  const diagonalWin = checkDiagonalWin(counter);\r\n\r\n  if (nonDiagonalWin || diagonalWin) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction checkNonDiagonalWin(counter: Array<Array<number>>) {\r\n  for (let x = 0; x < 3; x++) {\r\n    let rowWin = true;\r\n    let columnWin = true;\r\n    for (let y = 0; y < 3; y++) {\r\n      if (counter[x][y] !== 1) {\r\n        rowWin = false;\r\n      }\r\n      if (counter[y][x] !== 1) {\r\n        columnWin = false;\r\n      }\r\n    }\r\n    if (rowWin || columnWin) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction checkDiagonalWin(counter: Array<Array<number>>) {\r\n  if (\r\n    (counter[0][0] && counter[1][1] && counter[2][2]) ||\r\n    (counter[0][2] && counter[1][1] && counter[2][0])\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport Node from \"./node\";\r\nimport { determineWinner } from \"../utils/determineWinner\";\r\nimport \"../css/ticTacToe.css\";\r\n\r\nexport interface TicTacToeProps {}\r\n\r\nexport interface TicTacToeState {\r\n  turn: string;\r\n  x: Array<string>;\r\n  o: Array<string>;\r\n  score: { x: number; o: number };\r\n  winner: string;\r\n}\r\n\r\nclass TicTacToe extends React.Component<TicTacToeProps, TicTacToeState> {\r\n  state = {\r\n    turn: \"x\",\r\n    x: [],\r\n    o: [],\r\n    score: {\r\n      x: 0,\r\n      o: 0,\r\n    },\r\n    winner: \"\",\r\n  };\r\n\r\n  gridArray: Array<Array<string>> = [\r\n    [\"0-0\", \"0-1\", \"0-2\"],\r\n    [\"1-0\", \"1-1\", \"1-2\"],\r\n    [\"2-0\", \"2-1\", \"2-2\"],\r\n  ];\r\n\r\n  handleNodeClick = (id: string) => {\r\n    const { turn, x, o, winner, score } = this.state;\r\n    if (winner === \"\") {\r\n      if (this.isSelected(id) === \"\") {\r\n        let newTurn: string;\r\n        if (turn === \"x\") {\r\n          let newTurn: string = \"o\";\r\n          let newArray: Array<string> = x;\r\n          newArray.push(id);\r\n          this.setState({ x: newArray, turn: newTurn });\r\n          if (determineWinner(newArray, \"x\") === true) {\r\n            const newScore = score;\r\n            newScore.x += 1;\r\n            this.setState({ winner: \"x\", score: newScore });\r\n          }\r\n        } else {\r\n          let newTurn: string = \"x\";\r\n          let newArray: Array<string> = o;\r\n          newArray.push(id);\r\n          this.setState({ o: newArray, turn: newTurn });\r\n          if (determineWinner(newArray, \"o\") === true) {\r\n            const newScore = score;\r\n            newScore.o += 1;\r\n            this.setState({ winner: \"o\", score: newScore });\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  handleRestartGame = () => {\r\n    this.setState({ x: [], o: [], turn: \"x\", winner: \"\" });\r\n  };\r\n\r\n  isSelected = (id: string) => {\r\n    const { x, o } = this.state;\r\n    for (const element of x) {\r\n      if (id === element) {\r\n        return \"x\";\r\n      }\r\n    }\r\n    for (const element of o) {\r\n      if (id === element) {\r\n        return \"o\";\r\n      }\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  renderNodes = () => {\r\n    return this.gridArray.map((row) => {\r\n      return (\r\n        <tr key={row[0][0]}>\r\n          {row.map((node) => (\r\n            <Node\r\n              key={node}\r\n              _id={node}\r\n              selected={this.isSelected(node)}\r\n              onClick={this.handleNodeClick}\r\n            />\r\n          ))}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { score, turn, winner } = this.state;\r\n    return (\r\n      <div className=\"y-container\">\r\n        <div className=\"title\">Tic Tac Toe</div>\r\n        <div className=\"score\">\r\n          {winner === \"\" ? \"Turn: \" + turn : \"Please restart game\"}\r\n        </div>\r\n\r\n        <div className=\"x-container\">\r\n          <div className=\"player\">\r\n            <div className=\"player-header\">x</div>\r\n            <div className=\"separator\"></div>\r\n            <div className=\"player-score\">{score.x}</div>\r\n          </div>\r\n          <table className=\"grid\">\r\n            <tbody>{this.renderNodes()}</tbody>\r\n          </table>\r\n          <div className=\"player\">\r\n            <div className=\"player-header\">o</div>\r\n            <div className=\"separator\"></div>\r\n            <div className=\"player-score\">{score.o}</div>\r\n          </div>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-primary start\"\r\n          onClick={() => this.handleRestartGame()}\r\n        >\r\n          Restart Game\r\n        </button>\r\n        {winner !== \"\" && <div className=\"win-text\">{winner + \" wins!\"}</div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TicTacToe;\r\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport TicTacToe from \"./ticTacToe\";\n\nexport interface AppProps {}\n\nexport interface AppState {}\n\nclass App extends React.Component<AppProps, AppState> {\n  render() {\n    return (\n      <React.Fragment>\n        <TicTacToe />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}